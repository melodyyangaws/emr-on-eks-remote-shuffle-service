# // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# // SPDX-License-Identifier: MIT-0
apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: tpcds-benchmark-oss
  namespace: oss
spec:
  nodeSelector:
    app: sparktest
  type: Scala
  mode: cluster
  image: 021732063925.dkr.ecr.us-east-1.amazonaws.com/uniffle-spark-benchmark:3.2.0
  imagePullPolicy: Always
  sparkVersion: 3.2.0
  mainClass: com.amazonaws.eks.tpcds.BenchmarkSQL
  mainApplicationFile: local:///opt/spark/examples/jars/eks-spark-benchmark-assembly-1.0.jar
  arguments:
  # TPC-DS data localtion
    - "s3://$(BUCKET_PARAM)/BLOG_TPCDS-TEST-3T-partitioned"
  # results location
    - "s3://$(BUCKET_PARAM)/OSS_TPCDS-TEST-3T-RESULT"
  # Path to kit in the docker image
    - "/opt/tpcds-kit/tools"
  # Data Format
    - "parquet"
  # Scale factor (in GB)
    - "3000"
  # Number of iterations
    - "1"
  # Optimize queries with hive tables
    - "false"
  # Filter queries, will run all if empty - "q98-v2.4,q99-v2.4,ss_max-v2.4,q95-v2.4"
    - "" 
  # Logging set to WARN
    - "true"
  sparkConfigMap: debug-spark-map
  sparkConf:
    "spark.network.timeout": "2000s"
    "spark.executor.heartbeatInterval": "300s"  
    # IRSA for S3 connection
    "spark.kubernetes.executor.podNamePrefix": "oss-spark-tpcds"
    "spark.hadoop.fs.s3a.aws.credentials.provider": "com.amazonaws.auth.WebIdentityTokenCredentialsProvider"
    "spark.hadoop.fs.s3.impl": "org.apache.hadoop.fs.s3a.S3AFileSystem"
    "spark.hadoop.mapreduce.fileoutputcommitter.algorithm.version": "2" 
    "spark.serializer": "org.apache.spark.serializer.KryoSerializer"
    # Enable RSS
    "spark.shuffle.manager": "org.apache.spark.shuffle.RssShuffleManager"
    "spark.rss.coordinator.quorum": "rss-coordinator-uniffle-rss-0.uniffle.svc.cluster.local:19997,rss-coordinator-uniffle-rss-1.uniffle.svc.cluster.local:19997"
    "spark.rss.storage.type": "MEMORY_LOCALFILE"
    "spark.rss.remote.storage.path": "/rss1/rssdata,/rss2/rssdata"

    # "spark.rss.estimate.task.concurrency.enabled": "true"
    # "spark.rss.client.shuffle.data.distribution.type": "LOCAL_ORDER"
    # "spark.rss.estimate.task.concurrency.dynamic.factor": "1.0"
    # "spark.rss.client.io.compression.codec": "SNAPPY"
    # "spark.rss.client.send.threadPool.keepalive": "30000"
    # "spark.rss.data.replica": "1"
    # "spark.rss.data.replica.write": "1"
    # "spark.rss.data.replica.read": "1"

    # Run in parallel in different nodegroup 
    # "spark.kubernetes.node.selector.topology.kubernetes.io/zone": "us-east-1b"
    "spark.kubernetes.node.selector.eks.amazonaws.com/nodegroup": "c59"
    
    # # turn on prometheus
    # "spark.ui.prometheus.enabled": "true"
    # "spark.executor.processTreeMetrics.enabled": "true"
    # "spark.kubernetes.driver.annotation.prometheus.io/scrape": "true"
    # "spark.kubernetes.driver.annotation.prometheus.io/path": "/metrics/executors/prometheus/"
    # "spark.kubernetes.driver.annotation.prometheus.io/port": "4040"
    # "spark.kubernetes.driver.service.annotation.prometheus.io/scrape": "true"
    # "spark.kubernetes.driver.service.annotation.prometheus.io/path": "/metrics/driver/prometheus/"
    # "spark.kubernetes.driver.service.annotation.prometheus.io/port": "4040"
    # "spark.metrics.conf.*.sink.prometheusServlet.class": "org.apache.spark.metrics.sink.PrometheusServlet"
    # "spark.metrics.conf.*.sink.prometheusServlet.path": "/metrics/driver/prometheus/"
    # "spark.metrics.conf.master.sink.prometheusServlet.path": "/metrics/master/prometheus/"
    # "spark.metrics.conf.applications.sink.prometheusServlet.path": "/metrics/applications/prometheus/"
  driver:
    javaOptions: "-Dlog4j.configuration=file:/etc/spark/conf/log4j.properties"
    # initContainers:  
    # - name: volume-permission
    #   image: public.ecr.aws/y4g4v0z7/busybox
    #   command: ['sh', '-c', 'mkdir /ossdata1; chown -R 1000:1000 /ossdata*']
    #   volumeMounts:
    #     - name: spark-local-dir-1
    #       mountPath: /ossdata1
    env:
      - name: BUCKET_PARAM
        valueFrom:
          configMapKeyRef:
            name: special-config
            key: codeBucket   
    cores: 4
    coreLimit: "4.1"
    memory: "5g"
    memoryOverhead: "1000"
    serviceAccount: oss 
    # volumeMounts:
    #   - name: spark-local-dir-1
    #     mountPath: /ossdata1
  executor:
    javaOptions: "-Dlog4j.configuration=file:/etc/spark/conf/log4j.properties"
    # initContainers:  
    # - name: volume-permission
    #   image: public.ecr.aws/y4g4v0z7/busybox
    #   command: ['sh', '-c', 'mkdir /ossdata1; chown -R 1000:1000 /ossdata*']
    #   volumeMounts:
    #     - name: spark-local-dir-1
    #       mountPath: /ossdata1
    cores: 4
    coreLimit: "4.3"
    memory: "6g"
    memoryOverhead: "2g"
    # 8 executors per node  
    instances: 47
  #   volumeMounts:
  #     - name: spark-local-dir-1
  #       mountPath: /ossdata1 
  # volumes:
  #   - name: spark-local-dir-1
  #     hostPath:
  #       path: /local1
  restartPolicy:
    type: Never